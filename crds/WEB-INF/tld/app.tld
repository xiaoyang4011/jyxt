<?xml version="1.0" encoding="UTF-8"?>
<taglib version="2.0" xmlns="http://java.sun.com/xml/ns/j2ee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd">
 <description>JSTL library or functions</description>
 <display-name>JSTL core</display-name>
 <tlib-version>1.0</tlib-version>
 <short-name>app</short-name>
 <uri>http://localhost/cssystem</uri>
 <validator>
  <validator-class>org.apache.taglibs.standard.tlv.JstlCoreTLV</validator-class>

 </validator>
 <!-- 标签定义 -->
 <tag>
  <name>navigate</name>
  <tag-class>crds.pub.util.NavigateTag</tag-class>
  <body-content>empty</body-content>
  <attribute>
   <name>name</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <name>objectName</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <name>mode</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <name>iFrameName</name>
   <rtexprvalue>false</rtexprvalue>
  </attribute>
 </tag>
 <tag>
  <name>right</name>
  <tag-class>crds.pub.util.PopedomTag</tag-class>
  <body-content>empty</body-content>
  <attribute>
   <name>name</name>
   <required>true</required>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <name>on</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
  <attribute>
   <name>disabled</name>
   <rtexprvalue>true</rtexprvalue>
  </attribute>
 </tag>
 <!-- 函数定义 -->
 <function>
  <description>此方法用于格式化字符串数字,特别是对于财务数据的格式化处理.</description>
  <name>numberFormat</name>
  <function-class>crds.pub.util.CRDSFunctions</function-class>
  <function-signature>java.lang.String numberFormat(java.lang.String, java.lang.String, java.lang.String, int, int, int,int,java.lang.String)</function-signature>
  <example>${app:numberFormat("","","",8,0,0,3,"0")}				return 0;//数字部分为空或0则当作0来处理,必须有8位小数点,不足8位则不追加0
			${app:numberFormat("","","",8,1,0,3,"0")}				return 0.00000000;//数字部分为空或0则当作0来处理,必须有8位小数点,不足8位则追加0
			${app:numberFormat("0","","",8,0,0,2,"0")}				return 0;//数字部分无论是0或空则返回""
			${app:numberFormat("","","",8,0,0,2,"0")}				return 0;//数字部分无论是0或空则返回""
			${app:numberFormat("0","","",8,0,0,1,"0")}				return 0;//数字部分为0则返回""
			${app:numberFormat("","","",8,0,1,0,"0")}				return 0;//数字部分为空则当作""
			${app:numberFormat("4123.012","","",8,0,1,2,"0")}		return 4123.01200000;//必须有8位小数点,不足8位则追加0
			${app:numberFormat("4123.012","","",8,0,0,2,"0")}		return 4123.012;//8位小数点,不足8位则不追加0
			${app:numberFormat("4123.012","","",8,1,1,2,"0")}		return 4,123.01200000;//整数部分以逗号分割,8位小数点,不足8位则追加0
			${app:numberFormat("4123.012","","",8,1,0,2,"0")}		return 4,123.012;//整数部分以逗号分割,8位小数点,不足8位则不追加0
			${app:numberFormat("4123.012","100","",8,1,0,2,"0")}	return 41.23012;//除以100,整数部分以逗号分割,8位小数点,不足8位则不追加0
			${app:numberFormat("4123.012","100","",8,1,1,2,"0")}	return 41.23012000;//除以100,整数部分以逗号分割,8位小数点,不足8位则追加0
			${app:numberFormat("4123.012","","100",8,1,0,2,"0")}	return 412301.2;//乘以100,整数部分以逗号分割,8位小数点,不足8位则不追加0
			${app:numberFormat("4123.012","","100",8,1,1,2,"0")}	return 412301.20000000;//乘以100,整数部分以逗号分割,8位小数点,不足8位则追加0</example>
 </function>
 <function>
  <description>此方法用于格式化字符串数字,特别是对于财务数据的格式化处理.</description>
  <name>decimalFormat</name>
  <function-class>crds.pub.util.CRDSFunctions</function-class>
  <function-signature>java.lang.String decimalFormat(java.lang.String, int, int, int,int)</function-signature>
  <example>${app:decimalFormat("",8,0,0,3)}			return 0;//数字部分为空或0则当作0来处理,必须有8位小数点,不足8位则不追加0
			${app:decimalFormat("",8,1,0,3)}			return 0.00000000;//数字部分为空或0则当作0来处理,必须有8位小数点,不足8位则追加0
			${app:decimalFormat("0",8,0,0,2)}		return 0;//数字部分无论是0或空则返回""
			${app:decimalFormat("",8,0,0,2)}			return 0;//数字部分无论是0或空则返回""
			${app:decimalFormat("0",8,0,0,1)}		return 0;//数字部分为0则返回""
			${app:decimalFormat("",8,0,1,0)}			return 0;//数字部分为空则当作""
			${app:decimalFormat("4123.012",8,0,1,1)}	return 4123.01200000;//必须有8位小数点,不足8位则追加0
			${app:decimalFormat("4123.012",8,0,0,1)}	return 4123.012;//8位小数点,不足8位则不追加0
			${app:decimalFormat("4123.012",8,1,1,1)}	return 4,123.01200000;//整数部分以逗号分割,8位小数点,不足8位则追加0
			${app:decimalFormat("4123.012",8,1,0,1)}	return 4,123.012;//整数部分以逗号分割,8位小数点,不足8位则不追加0</example>
 </function>
 <function>
  <description>此方法用于格式化字符串数字,三个参数</description>
  <name>fmt</name>
  <function-class>crds.pub.util.CRDSFunctions</function-class>
  <function-signature>java.lang.String fmt(java.lang.String, int, int)</function-signature>
  <example>${app:fmt("2345.897",1,0)}	return 2346;
			${app:fmt("2345.897",1,1)}	return 2,346;
			${app:fmt("2345.897",2,0)}	return 2345.9;</example>
 </function>
 <function>
  <description>此方法判断第一个参数是否为null或"",为null或""返回第二个参数,否则返回第一个参数</description>
  <name>NEVL</name>
  <function-class>crds.pub.util.CRDSFunctions</function-class>
  <function-signature>java.lang.String NEVL(java.lang.String, java.lang.String)</function-signature>
  <example>${app:NEVL("","123")}	return "123"
	    	${app:NEVL("0","123")}	return "0"</example>
 </function>
 <function>
  <description>此方法判断第一个参数是否为null或"",为null或""返回第二个参数,否则返回第三个参数</description>
  <name>NEVL2</name>
  <function-class>crds.pub.util.CRDSFunctions</function-class>
  <function-signature>java.lang.String NEVL2(java.lang.String, java.lang.String, java.lang.String)</function-signature>
  <example>${app:NEVL2("","123","456")}	return "123"
	    	${app:NEVL2("0","123","456")}	return "456"</example>
 </function>
</taglib>
